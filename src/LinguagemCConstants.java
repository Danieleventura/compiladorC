/* Generated By:JavaCC: Do not edit this line. LinguagemCConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LinguagemCConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AUTO = 5;
  /** RegularExpression Id. */
  int MAIN = 6;
  /** RegularExpression Id. */
  int STRUCT = 7;
  /** RegularExpression Id. */
  int BREACK = 8;
  /** RegularExpression Id. */
  int ELSE = 9;
  /** RegularExpression Id. */
  int SWITCH = 10;
  /** RegularExpression Id. */
  int ENDERECO_VARIAVEL = 11;
  /** RegularExpression Id. */
  int CASE = 12;
  /** RegularExpression Id. */
  int REGISTER = 13;
  /** RegularExpression Id. */
  int TYPEDEF = 14;
  /** RegularExpression Id. */
  int EXTERN = 15;
  /** RegularExpression Id. */
  int RETURN = 16;
  /** RegularExpression Id. */
  int UNION = 17;
  /** RegularExpression Id. */
  int CONST = 18;
  /** RegularExpression Id. */
  int LONG = 19;
  /** RegularExpression Id. */
  int ENUM = 20;
  /** RegularExpression Id. */
  int SHORT = 21;
  /** RegularExpression Id. */
  int UNSIGNED = 22;
  /** RegularExpression Id. */
  int CONTINUE = 23;
  /** RegularExpression Id. */
  int FOR = 24;
  /** RegularExpression Id. */
  int SIGNED = 25;
  /** RegularExpression Id. */
  int VOID = 26;
  /** RegularExpression Id. */
  int GOTO = 27;
  /** RegularExpression Id. */
  int SIZEOF = 28;
  /** RegularExpression Id. */
  int VOLATILE = 29;
  /** RegularExpression Id. */
  int DO = 30;
  /** RegularExpression Id. */
  int IF = 31;
  /** RegularExpression Id. */
  int STATIC = 32;
  /** RegularExpression Id. */
  int WHILE = 33;
  /** RegularExpression Id. */
  int PRINTF = 34;
  /** RegularExpression Id. */
  int SCANF = 35;
  /** RegularExpression Id. */
  int SOMA = 36;
  /** RegularExpression Id. */
  int SUBTRACAO = 37;
  /** RegularExpression Id. */
  int MULTIPLICACAO = 38;
  /** RegularExpression Id. */
  int DIVISAO = 39;
  /** RegularExpression Id. */
  int RESTO_DIVISAO = 40;
  /** RegularExpression Id. */
  int INCREMENTO = 41;
  /** RegularExpression Id. */
  int DECREMENTO = 42;
  /** RegularExpression Id. */
  int ATRIBUICAO = 43;
  /** RegularExpression Id. */
  int DIVISAO_IGUAL = 44;
  /** RegularExpression Id. */
  int SOMA_IGUAL = 45;
  /** RegularExpression Id. */
  int SUBTRACAO_IGUAL = 46;
  /** RegularExpression Id. */
  int MULTIPLICACAO_IGUAL = 47;
  /** RegularExpression Id. */
  int RESTO_IGUAL = 48;
  /** RegularExpression Id. */
  int IGUAL = 49;
  /** RegularExpression Id. */
  int DIFERENCA = 50;
  /** RegularExpression Id. */
  int MAIOR_Q = 51;
  /** RegularExpression Id. */
  int MENOR_Q = 52;
  /** RegularExpression Id. */
  int MAIOR_IGUAL = 53;
  /** RegularExpression Id. */
  int MENOR_IGUAL = 54;
  /** RegularExpression Id. */
  int INT = 55;
  /** RegularExpression Id. */
  int CHAR = 56;
  /** RegularExpression Id. */
  int FLOAT = 57;
  /** RegularExpression Id. */
  int DOUBLE = 58;
  /** RegularExpression Id. */
  int AND = 59;
  /** RegularExpression Id. */
  int OR = 60;
  /** RegularExpression Id. */
  int NEGACAO = 61;
  /** RegularExpression Id. */
  int PONTO_VIRGULA = 62;
  /** RegularExpression Id. */
  int VIRGULA = 63;
  /** RegularExpression Id. */
  int ASPAS_SIMPLES = 64;
  /** RegularExpression Id. */
  int ASPAS_DUPLAS = 65;
  /** RegularExpression Id. */
  int PONTO = 66;
  /** RegularExpression Id. */
  int ABRE_CHAVE = 67;
  /** RegularExpression Id. */
  int FECHA_CHAVE = 68;
  /** RegularExpression Id. */
  int ABRE_PARENTESE = 69;
  /** RegularExpression Id. */
  int FECHA_PARENTESE = 70;
  /** RegularExpression Id. */
  int ABRE_COLCHETE = 71;
  /** RegularExpression Id. */
  int FECHA_COLCHETE = 72;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 73;
  /** RegularExpression Id. */
  int ATR_INT = 74;
  /** RegularExpression Id. */
  int ATR_REAL = 75;
  /** RegularExpression Id. */
  int LETRA = 76;
  /** RegularExpression Id. */
  int NUMERO = 77;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"auto\"",
    "\"main\"",
    "\"struct\"",
    "\"break\"",
    "\"else\"",
    "\"switch\"",
    "\"&\"",
    "\"case\"",
    "\"register\"",
    "\"typedef\"",
    "\"extern\"",
    "\"return\"",
    "\"union\"",
    "\"const\"",
    "\"long\"",
    "\"enum\"",
    "\"short\"",
    "\"unsigned\"",
    "\"continue\"",
    "\"for\"",
    "\"signed\"",
    "\"void\"",
    "\"goto\"",
    "\"sizeof\"",
    "\"volatile\"",
    "\"do\"",
    "\"if\"",
    "\"static\"",
    "\"while\"",
    "\"printf\"",
    "\"scanf\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"=\"",
    "\"/=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"%=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"int\"",
    "\"char\"",
    "\"float\"",
    "\"double\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\";\"",
    "\",\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\".\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "<IDENTIFICADOR>",
    "<ATR_INT>",
    "<ATR_REAL>",
    "<LETRA>",
    "<NUMERO>",
    "\"#include\"",
    "\"void main(int argc, char *argv[])\"",
    "\"void main()\"",
    "\"void main(void)\"",
    "\"int main(int argc, char *argv[])\"",
    "\"int main()\"",
    "\"int main(void)\"",
  };

}
