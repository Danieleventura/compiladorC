/* Generated By:JavaCC: Do not edit this line. LinguagemC.java */
import java.util.*;
import java.io.*;

public class LinguagemC implements LinguagemCConstants {
  public static void main(String args []) throws ParseException, IOException, Exception
  {
     LinguagemC parser = new LinguagemC(new FileInputStream("codigo.txt"));
    try
    {
      LinguagemC.inicio();
    }
    catch (ParseException e)
    {
      System.out.println("Erros foram encontrados. " + e);
    }
    }

  static final public void inicio() throws ParseException {
    Programa();
    jj_consume_token(0);
    System.out.print("\u005cnGRAMATICA ACEITA\u005cn");
  }

  static final public void Programa() throws ParseException {
    label_1:
    while (true) {
      BibliotecaDeclaracao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case INT:
      case CHAR:
      case FLOAT:
      case DOUBLE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      FuncaoDeclaracao();
    }
    Main();
  }

  static final public void BibliotecaDeclaracao() throws ParseException {
    jj_consume_token(78);
    jj_consume_token(MENOR_Q);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PONTO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(MAIOR_Q);
  }

  static final public void FuncaoDeclaracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case INT:
    case CHAR:
    case FLOAT:
    case DOUBLE:
      TipoDeDados();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ABRE_PARENTESE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case CHAR:
    case FLOAT:
    case DOUBLE:
      ListaDeParametros();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESE);
    jj_consume_token(ABRE_CHAVE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
    case FOR:
    case IF:
    case WHILE:
    case PRINTF:
    case SCANF:
    case INT:
    case CHAR:
    case FLOAT:
    case DOUBLE:
    case IDENTIFICADOR:
      CorpoDaDeclaracao();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_CHAVE);
  }

  static final public void Main() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 79:
      jj_consume_token(79);
      break;
    case 80:
      jj_consume_token(80);
      break;
    case 81:
      jj_consume_token(81);
      break;
    case 82:
      jj_consume_token(82);
      break;
    case 83:
      jj_consume_token(83);
      break;
    case 84:
      jj_consume_token(84);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    BlocoDeDeclaracoes();
  }

  static final public void TipoDeDados() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DeclaracaoVariavel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      jj_consume_token(CHAR);
      jj_consume_token(IDENTIFICADOR);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(VIRGULA);
        jj_consume_token(IDENTIFICADOR);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
        jj_consume_token(ASPAS_SIMPLES);
        jj_consume_token(IDENTIFICADOR);
        jj_consume_token(ASPAS_SIMPLES);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(PONTO_VIRGULA);
      break;
    case INT:
      jj_consume_token(INT);
      jj_consume_token(IDENTIFICADOR);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(VIRGULA);
        jj_consume_token(IDENTIFICADOR);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
        jj_consume_token(ATR_INT);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(PONTO_VIRGULA);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      jj_consume_token(IDENTIFICADOR);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRGULA);
        jj_consume_token(IDENTIFICADOR);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
        jj_consume_token(ATR_REAL);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(PONTO_VIRGULA);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      jj_consume_token(IDENTIFICADOR);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        jj_consume_token(VIRGULA);
        jj_consume_token(IDENTIFICADOR);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
        jj_consume_token(ATR_REAL);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(PONTO_VIRGULA);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ListaDeParametros() throws ParseException {
    Parametro();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(VIRGULA);
      Parametro();
    }
  }

  static final public void Parametro() throws ParseException {
    TipoDeDados();
    jj_consume_token(IDENTIFICADOR);
  }

  static final public void ChamadaDeFuncao() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ABRE_PARENTESE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        jj_consume_token(VIRGULA);
        jj_consume_token(IDENTIFICADOR);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESE);
    jj_consume_token(PONTO_VIRGULA);
  }

  static final public void CorpoDaDeclaracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case CHAR:
    case FLOAT:
    case DOUBLE:
      DeclaracaoVariavel();
      break;
    default:
      jj_la1[19] = jj_gen;
      if (jj_2_1(3)) {
        ChamadaDeFuncao();
      } else if (jj_2_2(3)) {
        ExpressaoMaisAtribuicao();
      } else if (jj_2_3(3)) {
        AtribuicaoSimples();
        jj_consume_token(PONTO_VIRGULA);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          If_Else();
          break;
        case WHILE:
          While();
          break;
        case FOR:
          For();
          break;
        case PRINTF:
          Printf();
          break;
        case SCANF:
          Scanf();
          break;
        case RETURN:
          jj_consume_token(RETURN);
          TiposRetorno();
          jj_consume_token(PONTO_VIRGULA);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void TiposRetorno() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case ATR_INT:
      jj_consume_token(ATR_INT);
      break;
    case ATR_REAL:
      jj_consume_token(ATR_REAL);
      break;
    case ABRE_PARENTESE:
      jj_consume_token(ABRE_PARENTESE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case ATR_INT:
        jj_consume_token(ATR_INT);
        break;
      case ATR_REAL:
        jj_consume_token(ATR_REAL);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(FECHA_PARENTESE);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AtribuicaoSimples() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ATRIBUICAO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATR_INT:
    case ATR_REAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATR_INT:
        jj_consume_token(ATR_INT);
        break;
      case ATR_REAL:
        jj_consume_token(ATR_REAL);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOMA:
        case SUBTRACAO:
        case MULTIPLICACAO:
        case DIVISAO:
        case RESTO_DIVISAO:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOMA:
          jj_consume_token(SOMA);
          break;
        case SUBTRACAO:
          jj_consume_token(SUBTRACAO);
          break;
        case MULTIPLICACAO:
          jj_consume_token(MULTIPLICACAO);
          break;
        case RESTO_DIVISAO:
          jj_consume_token(RESTO_DIVISAO);
          break;
        case DIVISAO:
          jj_consume_token(DIVISAO);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATR_INT:
          jj_consume_token(ATR_INT);
          break;
        case ATR_REAL:
          jj_consume_token(ATR_REAL);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case ASPAS_SIMPLES:
      jj_consume_token(ASPAS_SIMPLES);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ASPAS_SIMPLES);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void OperacoesNumeros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATR_INT:
      jj_consume_token(ATR_INT);
      break;
    case ATR_REAL:
      jj_consume_token(ATR_REAL);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      jj_consume_token(SOMA);
      break;
    case SUBTRACAO:
      jj_consume_token(SUBTRACAO);
      break;
    case MULTIPLICACAO:
      jj_consume_token(MULTIPLICACAO);
      break;
    case RESTO_DIVISAO:
      jj_consume_token(RESTO_DIVISAO);
      break;
    case DIVISAO:
      jj_consume_token(DIVISAO);
      break;
    case IGUAL:
    case DIFERENCA:
    case MAIOR_Q:
    case MENOR_Q:
    case MAIOR_IGUAL:
    case MENOR_IGUAL:
      ExpressaoRelacional();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATR_INT:
      jj_consume_token(ATR_INT);
      break;
    case ATR_REAL:
      jj_consume_token(ATR_REAL);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpressaoMaisAtribuicao() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBTRACAO_IGUAL:
      jj_consume_token(SUBTRACAO_IGUAL);
      break;
    case DIVISAO_IGUAL:
      jj_consume_token(DIVISAO_IGUAL);
      break;
    case MULTIPLICACAO_IGUAL:
      jj_consume_token(MULTIPLICACAO_IGUAL);
      break;
    case RESTO_IGUAL:
      jj_consume_token(RESTO_IGUAL);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATR_INT:
      jj_consume_token(ATR_INT);
      break;
    case ATR_REAL:
      jj_consume_token(ATR_REAL);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PONTO_VIRGULA);
  }

  static final public void If_Else() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(ABRE_PARENTESE);
    label_10:
    while (true) {
      Expressao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGACAO:
      case ABRE_PARENTESE:
      case IDENTIFICADOR:
      case ATR_INT:
      case ATR_REAL:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_10;
      }
    }
    jj_consume_token(FECHA_PARENTESE);
    BlocoDeDeclaracoes();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      BlocoDeDeclaracoes();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
  }

  static final public void While() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(ABRE_PARENTESE);
    Expressao();
    jj_consume_token(FECHA_PARENTESE);
    BlocoDeDeclaracoes();
  }

  static final public void For() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(ABRE_PARENTESE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ATRIBUICAO);
    jj_consume_token(ATR_INT);
    jj_consume_token(PONTO_VIRGULA);
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOR_Q:
      jj_consume_token(MENOR_Q);
      break;
    case MAIOR_Q:
      jj_consume_token(MAIOR_Q);
      break;
    case MENOR_IGUAL:
      jj_consume_token(MENOR_IGUAL);
      break;
    case MAIOR_IGUAL:
      jj_consume_token(MAIOR_IGUAL);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ATR_INT);
    jj_consume_token(PONTO_VIRGULA);
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENTO:
      jj_consume_token(INCREMENTO);
      break;
    case DECREMENTO:
      jj_consume_token(DECREMENTO);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FECHA_PARENTESE);
    BlocoDeDeclaracoes();
  }

  static final public void Printf() throws ParseException {
    jj_consume_token(PRINTF);
    jj_consume_token(ABRE_PARENTESE);
    jj_consume_token(ASPAS_DUPLAS);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ASPAS_DUPLAS);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_11;
      }
      jj_consume_token(VIRGULA);
      jj_consume_token(IDENTIFICADOR);
    }
    jj_consume_token(FECHA_PARENTESE);
    jj_consume_token(PONTO_VIRGULA);
  }

  static final public void Scanf() throws ParseException {
    jj_consume_token(SCANF);
    jj_consume_token(ABRE_PARENTESE);
    jj_consume_token(ASPAS_DUPLAS);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ASPAS_DUPLAS);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_12;
      }
      jj_consume_token(VIRGULA);
      jj_consume_token(ENDERECO_VARIAVEL);
      jj_consume_token(IDENTIFICADOR);
    }
    jj_consume_token(FECHA_PARENTESE);
    jj_consume_token(PONTO_VIRGULA);
  }

  static final public void BlocoDeDeclaracoes() throws ParseException {
    jj_consume_token(ABRE_CHAVE);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
      case FOR:
      case IF:
      case WHILE:
      case PRINTF:
      case SCANF:
      case INT:
      case CHAR:
      case FLOAT:
      case DOUBLE:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_13;
      }
      CorpoDaDeclaracao();
    }
    jj_consume_token(FECHA_CHAVE);
  }

  static final public void Expressao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGACAO:
      jj_consume_token(NEGACAO);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
    case ATR_INT:
    case ATR_REAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DECREMENTO:
        case IDENTIFICADOR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFICADOR:
            ChamadaDeFuncao();
            jj_consume_token(INCREMENTO);
            break;
          case DECREMENTO:
            jj_consume_token(DECREMENTO);
            break;
          default:
            jj_la1[42] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        break;
      case ATR_INT:
      case ATR_REAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATR_INT:
          jj_consume_token(ATR_INT);
          break;
        case ATR_REAL:
          jj_consume_token(ATR_REAL);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case DIVISAO:
      case RESTO_DIVISAO:
      case ATRIBUICAO:
      case DIVISAO_IGUAL:
      case SOMA_IGUAL:
      case SUBTRACAO_IGUAL:
      case MULTIPLICACAO_IGUAL:
      case RESTO_IGUAL:
      case IGUAL:
      case DIFERENCA:
      case MAIOR_Q:
      case MENOR_Q:
      case MAIOR_IGUAL:
      case MENOR_IGUAL:
      case AND:
      case OR:
      case NEGACAO:
      case IDENTIFICADOR:
      case ATR_INT:
      case ATR_REAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATRIBUICAO:
          Atribuicao();
          break;
        case AND:
        case OR:
        case NEGACAO:
          ExpressaoLogica();
          break;
        case IGUAL:
        case DIFERENCA:
        case MAIOR_Q:
        case MENOR_Q:
        case MAIOR_IGUAL:
        case MENOR_IGUAL:
          ExpressaoRelacional();
          break;
        case SOMA:
        case SUBTRACAO:
        case MULTIPLICACAO:
        case DIVISAO:
        case RESTO_DIVISAO:
        case DIVISAO_IGUAL:
        case SOMA_IGUAL:
        case SUBTRACAO_IGUAL:
        case MULTIPLICACAO_IGUAL:
        case RESTO_IGUAL:
          ExpressaoNumerica();
          break;
        case IDENTIFICADOR:
          ExpressaoVariaveis();
          break;
        case ATR_INT:
        case ATR_REAL:
          OperacoesNumeros();
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      break;
    case ABRE_PARENTESE:
      jj_consume_token(ABRE_PARENTESE);
      Expressao();
      jj_consume_token(FECHA_PARENTESE);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Atribuicao() throws ParseException {
    jj_consume_token(ATRIBUICAO);
    Expressao();
  }

  static final public void ExpressaoVariaveis() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
    case SUBTRACAO:
    case MULTIPLICACAO:
    case DIVISAO:
    case RESTO_DIVISAO:
    case DIVISAO_IGUAL:
    case SOMA_IGUAL:
    case SUBTRACAO_IGUAL:
    case MULTIPLICACAO_IGUAL:
    case RESTO_IGUAL:
    case IGUAL:
    case DIFERENCA:
    case MAIOR_Q:
    case MENOR_Q:
    case MAIOR_IGUAL:
    case MENOR_IGUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
      case DIFERENCA:
      case MAIOR_Q:
      case MENOR_Q:
      case MAIOR_IGUAL:
      case MENOR_IGUAL:
        ExpressaoRelacional();
        break;
      case SOMA:
      case SUBTRACAO:
      case MULTIPLICACAO:
      case DIVISAO:
      case RESTO_DIVISAO:
      case DIVISAO_IGUAL:
      case SOMA_IGUAL:
      case SUBTRACAO_IGUAL:
      case MULTIPLICACAO_IGUAL:
      case RESTO_IGUAL:
        ExpressaoNumerica();
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_4(2147483647)) {
        jj_consume_token(ATR_INT);
      } else if (jj_2_5(2147483647)) {
        jj_consume_token(ATR_REAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
  }

  static final public void ExpressaoNumerica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      jj_consume_token(SOMA);
      break;
    case SOMA_IGUAL:
      jj_consume_token(SOMA_IGUAL);
      break;
    case SUBTRACAO_IGUAL:
      jj_consume_token(SUBTRACAO_IGUAL);
      break;
    case SUBTRACAO:
      jj_consume_token(SUBTRACAO);
      break;
    case DIVISAO_IGUAL:
      jj_consume_token(DIVISAO_IGUAL);
      break;
    case DIVISAO:
      jj_consume_token(DIVISAO);
      break;
    case MULTIPLICACAO:
      jj_consume_token(MULTIPLICACAO);
      break;
    case MULTIPLICACAO_IGUAL:
      jj_consume_token(MULTIPLICACAO_IGUAL);
      break;
    case RESTO_DIVISAO:
      jj_consume_token(RESTO_DIVISAO);
      break;
    case RESTO_IGUAL:
      jj_consume_token(RESTO_IGUAL);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expressao();
  }

  static final public void ExpressaoRelacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOR_Q:
      jj_consume_token(MENOR_Q);
      break;
    case MAIOR_Q:
      jj_consume_token(MAIOR_Q);
      break;
    case MENOR_IGUAL:
      jj_consume_token(MENOR_IGUAL);
      break;
    case MAIOR_IGUAL:
      jj_consume_token(MAIOR_IGUAL);
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      break;
    case DIFERENCA:
      jj_consume_token(DIFERENCA);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expressao();
  }

  static final public void ExpressaoLogica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGACAO:
      jj_consume_token(NEGACAO);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expressao();
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(ASPAS_SIMPLES)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(ABRE_PARENTESE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_scan_token(FECHA_PARENTESE)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(ATR_REAL)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(ATRIBUICAO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ATR_INT)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LinguagemCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[54];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x4000000,0x4000000,0x0,0x81010000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81010000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x81010000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x7800000,0x7800000,0x7800000,0x780000e,0x0,0x7800000,0x80000000,0x800,0x80000000,0x800,0x80000000,0x800,0x80000000,0x800,0x7800000,0x80000000,0x80000000,0x0,0x7800000,0xe,0x0,0x0,0x0,0x1f0,0x1f0,0x0,0x0,0x0,0x7e01f0,0x0,0x1d000,0x0,0x20000000,0x0,0x800000,0x780000,0x600,0x80000000,0x80000000,0x780000e,0x20000000,0x400,0x400,0x0,0x0,0x387ff9f0,0x387ff9f0,0x0,0x7ff1f0,0x7ff1f0,0x1f1f0,0x7e0000,0x38000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x4000,0x0,0x0,0x0,0x200,0x1f8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0xe00,0xe20,0xc00,0x0,0x0,0xc00,0xc01,0xc00,0x0,0xc00,0x0,0xc00,0xe20,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x200,0x200,0xc00,0xe00,0xe00,0xe00,0xe20,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LinguagemC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LinguagemC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LinguagemCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LinguagemC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LinguagemCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LinguagemC(LinguagemCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LinguagemCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[85];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 54; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 85; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
