/* Generated By:JavaCC: Do not edit this line. LinguagemCTokenManager.java */
import java.util.*;
import java.io.*;

/** Token Manager. */
public class LinguagemCTokenManager implements LinguagemCConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x780000ffffff7e0L) != 0L || (active1 & 0x1f8000L) != 0L)
         {
            jjmatchedKind = 73;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x4000000c0000000L) != 0L)
            return 1;
         if ((active0 & 0x380000f3ffff7e0L) != 0L || (active1 & 0x1f8000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x80000001000000L) != 0L || (active1 & 0x1c0000L) != 0L)
            return 1;
         if ((active0 & 0x700000f3efff7e0L) != 0L || (active1 & 0x38000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x600000f32e7e580L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x10000000c181260L) != 0L || (active1 & 0x38000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x400000532c1e480L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x200000a00260100L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x20c06000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x400000512018480L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x20c02000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x4000L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x20c02000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 65);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 37:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 39:
         return jjStopAtPos(0, 64);
      case 40:
         return jjStopAtPos(0, 69);
      case 41:
         return jjStopAtPos(0, 70);
      case 42:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 43:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x220000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 63);
      case 45:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x440000000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 66);
      case 47:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 62);
      case 60:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 71);
      case 93:
         return jjStopAtPos(0, 72);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000000841000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400000040000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x108200L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000001000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80000080000000L, 0x1c0000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x12000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x912200480L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x420000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x24000000L, 0x38000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 67);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 68);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 43:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 45:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1040L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000200200000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000000L, active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000200L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000520000L, active1, 0x1c0000L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000002d8c0000L, active1, 0x38000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000100L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000080L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 124:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000900000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2002000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x604020440L, active1, 0x38000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8c0000L, active1, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000200000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x401200L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8018020L, active1, 0x1c0000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000100000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1c0000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000020000100L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x38000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 1);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000c000L, active1, 0L);
      case 103:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x402000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 109:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 1);
         break;
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0xc02000000L, active1, 0L);
      case 111:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 1);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100800400L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10080L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x38000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x480L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 1);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100800000L, active1, 0L);
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1c0000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 1);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x420000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1c0000L);
      case 99:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 1);
         break;
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 1);
         break;
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L);
      case 102:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 1);
         break;
      case 104:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x38000L);
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 1);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000L, active1, 0L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x38000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x402000L, active1, 0L);
      case 102:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1c0000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 1);
         break;
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 1);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 1);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(7, 78);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x38000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1c0000L);
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa9_0(active1, 0x1c0000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0x38000L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa10_0(active1, 0x38000L);
      case 41:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(9, 83);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0x40000L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(10, 80);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active1, 0x100000L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active1, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active1, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
static private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa13_0(active1, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active1, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
static private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_0(active1, 0x8000L);
      case 41:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(13, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa14_0(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
static private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(14, 81);
         break;
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa16_0(active1, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
static private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa17_0(active1, 0x40000L);
      case 103:
         return jjMoveStringLiteralDfa17_0(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
static private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 44:
         return jjMoveStringLiteralDfa18_0(active1, 0x40000L);
      case 99:
         return jjMoveStringLiteralDfa18_0(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
static private int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa19_0(active1, 0x40000L);
      case 44:
         return jjMoveStringLiteralDfa19_0(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
static private int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active1, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa20_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1);
}
static private int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa21_0(active1, 0x8000L);
      case 104:
         return jjMoveStringLiteralDfa21_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1);
}
static private int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa22_0(active1, 0x40000L);
      case 104:
         return jjMoveStringLiteralDfa22_0(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1);
}
static private int jjMoveStringLiteralDfa22_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1);
      return 22;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa23_0(active1, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa23_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1);
}
static private int jjMoveStringLiteralDfa23_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1);
      return 23;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa24_0(active1, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa24_0(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1);
}
static private int jjMoveStringLiteralDfa24_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa25_0(active1, 0x8000L);
      case 42:
         return jjMoveStringLiteralDfa25_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1);
}
static private int jjMoveStringLiteralDfa25_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(23, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1);
      return 25;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa26_0(active1, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa26_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1);
}
static private int jjMoveStringLiteralDfa26_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(24, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, active1);
      return 26;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa27_0(active1, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa27_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, active1);
}
static private int jjMoveStringLiteralDfa27_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(25, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, active1);
      return 27;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa28_0(active1, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa28_0(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, active1);
}
static private int jjMoveStringLiteralDfa28_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(26, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, active1);
      return 28;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa29_0(active1, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa29_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, active1);
}
static private int jjMoveStringLiteralDfa29_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(27, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, active1);
      return 29;
   }
   switch(curChar)
   {
      case 91:
         return jjMoveStringLiteralDfa30_0(active1, 0x40000L);
      case 118:
         return jjMoveStringLiteralDfa30_0(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, active1);
}
static private int jjMoveStringLiteralDfa30_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(28, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, active1);
      return 30;
   }
   switch(curChar)
   {
      case 91:
         return jjMoveStringLiteralDfa31_0(active1, 0x8000L);
      case 93:
         return jjMoveStringLiteralDfa31_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, active1);
}
static private int jjMoveStringLiteralDfa31_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(29, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, active1);
      return 31;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(31, 82);
         break;
      case 93:
         return jjMoveStringLiteralDfa32_0(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, active1);
}
static private int jjMoveStringLiteralDfa32_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(30, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, 0L, active1);
      return 32;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(32, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(31, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   3, 4, 5, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\141\165\164\157", "\155\141\151\156", 
"\163\164\162\165\143\164", "\142\162\145\141\153", "\145\154\163\145", "\163\167\151\164\143\150", "\46", 
"\143\141\163\145", "\162\145\147\151\163\164\145\162", "\164\171\160\145\144\145\146", 
"\145\170\164\145\162\156", "\162\145\164\165\162\156", "\165\156\151\157\156", "\143\157\156\163\164", 
"\154\157\156\147", "\145\156\165\155", "\163\150\157\162\164", 
"\165\156\163\151\147\156\145\144", "\143\157\156\164\151\156\165\145", "\146\157\162", 
"\163\151\147\156\145\144", "\166\157\151\144", "\147\157\164\157", "\163\151\172\145\157\146", 
"\166\157\154\141\164\151\154\145", "\144\157", "\151\146", "\163\164\141\164\151\143", "\167\150\151\154\145", 
"\160\162\151\156\164\146", "\163\143\141\156\146", "\53", "\55", "\52", "\57", "\45", "\53\53", "\55\55", 
"\75", "\57\75", "\53\75", "\55\75", "\52\75", "\45\75", "\75\75", "\41\75", "\76", 
"\74", "\76\75", "\74\75", "\151\156\164", "\143\150\141\162", 
"\146\154\157\141\164", "\144\157\165\142\154\145", "\46\46", "\174\174", "\41", "\73", "\54", "\47", 
"\42", "\56", "\173", "\175", "\50", "\51", "\133", "\135", null, null, null, null, 
null, "\43\151\156\143\154\165\144\145", 
"\166\157\151\144\40\155\141\151\156\50\151\156\164\40\141\162\147\143\54\40\143\150\141\162\40\52\141\162\147\166\133\135\51", "\166\157\151\144\40\155\141\151\156\50\51", 
"\166\157\151\144\40\155\141\151\156\50\166\157\151\144\51", 
"\151\156\164\40\155\141\151\156\50\151\156\164\40\141\162\147\143\54\40\143\150\141\162\40\52\141\162\147\166\133\135\51", "\151\156\164\40\155\141\151\156\50\51", 
"\151\156\164\40\155\141\151\156\50\166\157\151\144\51", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x1fcfffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[7];
static private final int[] jjstateSet = new int[14];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public LinguagemCTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public LinguagemCTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 7; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
     System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
    System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
    System.out.println("\u005cnPalavra Reservada: " + image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
     System.out.println("\u005cnOperador Aritmetico: " + image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
     System.out.println("\u005cnOperador Aritmetico: " + image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
     System.out.println("\u005cnOperador Aritmetico: " + image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
     System.out.println("\u005cnOperador Aritmetico: " + image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
     System.out.println("\u005cnOperador Aritmetico: " + image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
     System.out.println("\u005cnOperador Aritmetico: " + image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
     System.out.println("\u005cnOperador Aritmetico: " + image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
     System.out.println("\u005cnOperador de atribuicao: " + image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
     System.out.println("\u005cnOperador de atribuicao: " + image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
     System.out.println("\u005cnOperador de atribuicao: " + image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
     System.out.println("\u005cnOperador de atribuicao: " + image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
     System.out.println("\u005cnOperador de atribuicao: " + image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
     System.out.println("\u005cnOperador de atribuicao: " + image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
     System.out.println("\u005cnOperador relacional: " + image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
     System.out.println("\u005cnOperador relacional: " + image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
     System.out.println("\u005cnOperador relacional: " + image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
     System.out.println("\u005cnOperador relacional: " + image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
     System.out.println("\u005cnOperador relacional: " + image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
     System.out.println("\u005cnOperador relacional: " + image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
    System.out.println("\u005cnTipo de dado: " + image);
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
    System.out.println("\u005cnTipo de dado: " + image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
    System.out.println("\u005cnTipo de dado: " + image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
    System.out.println("\u005cnTipo de dado: " + image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
    System.out.println("\u005cnOperador logico: " + image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
    System.out.println("\u005cnOperador logico: " + image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
    System.out.println("\u005cnOperador logico: " + image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
    System.out.println("\u005cnDelimitador: " + image);
         break;
      case 73 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Identificador: " + image);
         break;
      case 74 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Identificador Inteiro: " + image);
         break;
      case 75 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Identificador Real: " + image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
